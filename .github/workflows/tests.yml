name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  smoke-tests:
    name: Smoke Tests (Fast)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      chromadb:
        image: chromadb/chroma:latest
        ports:
          - 8000:8000

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          tesseract-ocr \
          tesseract-ocr-eng \
          poppler-utils \
          libmagic1

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio

    - name: Set environment variables
      run: |
        echo "CHROMA_HOST=localhost" >> $GITHUB_ENV
        echo "CHROMA_PORT=8000" >> $GITHUB_ENV
        echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> $GITHUB_ENV
        echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
        echo "VOYAGE_API_KEY=${{ secrets.VOYAGE_API_KEY }}" >> $GITHUB_ENV

    - name: Start RAG service
      run: |
        nohup python app.py > app.log 2>&1 &
        sleep 10

    - name: Wait for service
      run: |
        echo "Waiting for ChromaDB and RAG service to be ready..."
        sleep 15
        for i in {1..60}; do
          if curl -s http://localhost:8001/health > /dev/null; then
            echo "✅ Service is ready"
            break
          fi
          echo "Waiting for service... ($i/60)"
          sleep 3
        done

    - name: Run smoke tests
      run: |
        pytest tests/integration/test_smoke.py -v --tb=short --maxfail=1
      timeout-minutes: 2

    - name: Display service logs on failure
      if: failure()
      run: |
        echo "=== Service Logs ==="
        cat app.log || echo "No app.log found"

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          tesseract-ocr \
          tesseract-ocr-eng \
          poppler-utils \
          libmagic1

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: Run unit tests
      run: |
        pytest tests/unit -v --tb=short --maxfail=5 --cov=src --cov-report=term-missing
      timeout-minutes: 5

    - name: Upload coverage reports
      if: always()
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  fast-integration-tests:
    name: Fast Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      chromadb:
        image: chromadb/chroma:latest
        ports:
          - 8000:8000

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          tesseract-ocr \
          tesseract-ocr-eng \
          poppler-utils \
          libmagic1

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio

    - name: Set environment variables
      run: |
        echo "CHROMA_HOST=localhost" >> $GITHUB_ENV
        echo "CHROMA_PORT=8000" >> $GITHUB_ENV
        echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> $GITHUB_ENV
        echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
        echo "VOYAGE_API_KEY=${{ secrets.VOYAGE_API_KEY }}" >> $GITHUB_ENV

    - name: Start RAG service
      run: |
        nohup python app.py > app.log 2>&1 &
        sleep 10

    - name: Wait for service
      run: |
        echo "Waiting for ChromaDB and RAG service to be ready..."
        sleep 15
        for i in {1..60}; do
          if curl -s http://localhost:8001/health > /dev/null; then
            echo "✅ Service is ready"
            break
          fi
          echo "Waiting for service... ($i/60)"
          sleep 3
        done

    - name: Run fast integration tests (no LLM calls)
      run: |
        pytest tests/integration -m "not slow" -v --tb=short
      timeout-minutes: 10

    - name: Display service logs on failure
      if: failure()
      run: |
        echo "=== Service Logs ==="
        cat app.log || echo "No app.log found"

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [smoke-tests, unit-tests, fast-integration-tests]
    if: always()

    steps:
    - name: Check test results
      run: |
        echo "=== Test Results ==="
        echo "Smoke Tests: ${{ needs.smoke-tests.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Fast Integration Tests: ${{ needs.fast-integration-tests.result }}"

        if [ "${{ needs.smoke-tests.result }}" != "success" ] || \
           [ "${{ needs.unit-tests.result }}" != "success" ]; then
          echo "❌ Critical tests failed"
          exit 1
        fi

        echo "✅ All critical tests passed"
